{"version":3,"sources":["CurrentLocation.js","App.js","reportWebVitals.js","index.js","apiKeys.js"],"names":["CurrentLocation","state","lat","undefined","lon","temperatureC","city","country","humidity","getPosition","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","a","fetch","apiKeys","base","key","apiCall","json","data","setState","name","Math","round","main","temp","weather","sys","dateBuilder","d","toString","this","then","position","coords","latitude","longitude","catch","err","alert","Fragment","className","Date","style","color","fontSize","fontWeight","marginTop","Component","api","App","useState","query","setQuery","setWeather","type","value","onChange","e","target","placeholder","onKeyPress","evt","res","result","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"iSAiGeA,EA9Ff,4MACEC,MAAQ,CACNC,SAAKC,EACLC,SAAKD,EACLE,kBAAcF,EACdG,UAAMH,EACNI,aAASJ,EACTK,cAAUL,GAPd,EA2BEM,YAAc,SAACC,GACb,OAAO,IAAIC,SAAQ,SAAUC,EAASC,GACpCC,UAAUC,YAAYC,mBAAmBJ,EAASC,EAAQH,OA7BhE,EAiCEO,WAjCF,uCAiCe,WAAOf,EAAKE,GAAZ,iBAAAc,EAAA,sEACWC,MAAM,GAAD,OACtBC,IAAQC,KADc,uBACKnB,EADL,gBACgBE,EADhB,+BAC0CgB,IAAQE,MAFlE,cACLC,EADK,gBAIQA,EAAQC,OAJhB,OAILC,EAJK,OAMX,EAAKC,SAAS,CACZxB,IAAKA,EACLE,IAAKA,EACLE,KAAMmB,EAAKE,KACXtB,aAAcuB,KAAKC,MAAMJ,EAAKK,KAAKC,MACnCD,KAAML,EAAKO,QAAQ,GAAGF,KACtBvB,QAASkB,EAAKQ,IAAI1B,QAClBC,SAAUiB,EAAKK,KAAKtB,WAbX,2CAjCf,0DAkDE0B,YAAc,SAACC,GACb,OAAOA,EAAEC,YAnDb,kEAUuB,IAAD,OACdtB,UAAUC,YACZsB,KAAK5B,cACF6B,MAAK,SAACC,GACL,EAAKtB,WAAWsB,EAASC,OAAOC,SAAUF,EAASC,OAAOE,cAE3DC,OAAM,SAACC,GACN,EAAK3B,WAAW,MAAO,OACvB4B,MACE,0JAINA,MAAM,kCAvBZ,+BAuDI,OAAIR,KAAKpC,MAAMI,aAEX,cAAC,IAAMyC,SAAP,UACE,gCACE,sBAAKC,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UACGV,KAAKpC,MAAMK,KADd,KACsB+B,KAAKpC,MAAMM,WAEjC,qBAAKwC,UAAU,OAAf,SAAuBV,KAAKH,YAAY,IAAIc,WAE9C,sBAAKD,UAAU,cAAf,UACE,sBAAKA,UAAU,cAAf,UAA8BV,KAAKpC,MAAMI,aAAzC,WACA,qBAAK0C,UAAU,UAAf,SAA0BV,KAAKpC,MAAM6B,eAO3C,cAAC,IAAMgB,SAAP,UACE,qBAAKC,UAAU,eAAf,SACE,sBAAKA,UAAU,WAAf,UACE,oBACEE,MAAO,CAAEC,MAAO,QAASC,SAAU,OAAQC,WAAY,OADzD,qCAKA,qBAAIH,MAAO,CAAEC,MAAO,QAASG,UAAW,QAAxC,+DACoD,uBADpD,2DAlFd,GAAqCC,aCC/BC,G,MACC,oCADDA,EAEE,2CAuEOC,MApEf,WACE,IAAqBrB,EADR,EAKasB,mBAAS,IALtB,mBAKNC,EALM,KAKCC,EALD,OAMiBF,mBAAS,IAN1B,mBAMNzB,EANM,KAMG4B,EANH,KAqBb,OACE,cAAC,IAAMd,SAAP,UACE,qBACEC,UAC0B,qBAAjBf,EAAQF,MACXE,EAAQF,KAAKC,KAAO,GAClB,WAEF,MANR,SASE,iCACE,qBAAKgB,UAAU,aAAf,SACE,uBACEc,KAAK,OACLC,MAAOJ,EACPK,SAAU,SAACC,GAAD,OAAOL,EAASK,EAAEC,OAAOH,QACnCI,YAAY,YACZnB,UAAU,aACVoB,WAhCG,SAACC,GACE,UAAZA,EAAI9C,KACNH,MAAM,GAAD,OAAIoC,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IAAWjB,MACnE,SAAC+B,GAAD,OACEA,EAAI7C,OAAOc,MAAK,SAACgC,GACfV,EAAWU,GACXX,EAAS,IACTY,QAAQC,IAAIxC,cA4Bd,cAAC,EAAD,IACwB,oBAAhBA,EAAQF,KACd,gCACE,sBAAKiB,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UACGf,EAAQL,KADX,KACmBK,EAAQC,IAAI1B,WAE/B,qBAAKwC,UAAU,OAAf,UAjDOZ,EAiD4B,IAAIa,KAhD5Cb,EAAEC,iBAkDC,sBAAKW,UAAU,cAAf,UACE,sBAAKA,UAAU,cAAf,UACGnB,KAAKC,MAAMG,EAAQF,KAAKC,MAD3B,WAGA,qBAAKgB,UAAU,UAAf,SAA0Bf,EAAQA,QAAQ,GAAGF,aAIjD,WCzDG2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrC,MAAK,YAAkD,IAA/CsC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K,gBChBAa,EAAOC,QAAU,CACfjE,IAAK,mCACLD,KAAM,8C","file":"static/js/main.46740733.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport apiKeys from './apiKeys';\n\nexport class CurrentLocation extends Component {\n  state = {\n    lat: undefined,\n    lon: undefined,\n    temperatureC: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n  };\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPosition()\n        .then((position) => {\n          this.getWeather(position.coords.latitude, position.coords.longitude);\n        })\n        .catch((err) => {\n          this.getWeather(28.67, 77.22);\n          alert(\n            \"You have disabled location service. Allow 'This App' to access your location. Your current location will be used for calculating Real time weather.\"\n          );\n        });\n    } else {\n      alert('GeoLocation is not available');\n    }\n  }\n\n  getPosition = (options) => {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n  };\n\n  getWeather = async (lat, lon) => {\n    const apiCall = await fetch(\n      `${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`\n    );\n    const data = await apiCall.json();\n\n    this.setState({\n      lat: lat,\n      lon: lon,\n      city: data.name,\n      temperatureC: Math.round(data.main.temp),\n      main: data.weather[0].main,\n      country: data.sys.country,\n      humidity: data.main.humidity,\n    });\n  };\n\n  dateBuilder = (d) => {\n    return d.toString();\n  };\n\n  render() {\n    if (this.state.temperatureC) {\n      return (\n        <React.Fragment>\n          <div>\n            <div className=\"location-box\">\n              <div className=\"location\">\n                {this.state.city}, {this.state.country}\n              </div>\n              <div className=\"date\">{this.dateBuilder(new Date())}</div>\n            </div>\n            <div className=\"weather-box\">\n              <div className=\"temperature\">{this.state.temperatureC}&deg;C</div>\n              <div className=\"weather\">{this.state.main}</div>\n            </div>\n          </div>\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <div className=\"location-box\">\n            <div className=\"location\">\n              <h3\n                style={{ color: 'white', fontSize: '22px', fontWeight: '600' }}\n              >\n                Detecting your location\n              </h3>\n              <h3 style={{ color: 'white', marginTop: '10px' }}>\n                Your current location wil be displayed on the App <br></br> &\n                used for calculating Real time weather.\n              </h3>\n            </div>\n          </div>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default CurrentLocation;\n","import React, { useState } from 'react';\nimport CurrentLocation from './CurrentLocation';\nimport './App.css';\n\nconst api = {\n  key: 'd9c398bcfd45349083bde3f5f7e17fae',\n  base: 'https://api.openweathermap.org/data/2.5/',\n};\n\nfunction App() {\n  const dateBuilder = (d) => {\n    return d.toString();\n  };\n\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n  const search = (evt) => {\n    if (evt.key === 'Enter') {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`).then(\n        (res) =>\n          res.json().then((result) => {\n            setWeather(result);\n            setQuery('');\n            console.log(weather);\n          })\n      );\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <div\n        className={\n          typeof weather.main !== 'undefined'\n            ? weather.main.temp > 16\n              ? 'app warm'\n              : 'app'\n            : 'app'\n        }\n      >\n        <main>\n          <div className=\"search-box\">\n            <input\n              type=\"text\"\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              placeholder=\"Search...\"\n              className=\"search-bar\"\n              onKeyPress={search}\n            />\n          </div>\n          <CurrentLocation />\n          {typeof weather.main != 'undefined' ? (\n            <div>\n              <div className=\"location-box\">\n                <div className=\"location\">\n                  {weather.name}, {weather.sys.country}\n                </div>\n                <div className=\"date\">{dateBuilder(new Date())}</div>\n              </div>\n              <div className=\"weather-box\">\n                <div className=\"temperature\">\n                  {Math.round(weather.main.temp)}&deg;C\n                </div>\n                <div className=\"weather\">{weather.weather[0].main}</div>\n              </div>\n            </div>\n          ) : (\n            ''\n          )}\n        </main>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = {\n  key: 'd9c398bcfd45349083bde3f5f7e17fae',\n  base: 'https://api.openweathermap.org/data/2.5/',\n};\n"],"sourceRoot":""}